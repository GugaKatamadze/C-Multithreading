/////////////////////////////

ThreadPool

იღებს void* fun(void* args) ტიპის ფუნქციებს.
runThreadPool ქმნის thread pool-ს და მასში აგდებს 2 სხვადასხვა დანიშნულების ფუნქციებს.
sum ფუნქცია კრებს ორ რენდომ რიცხვს და ბეჭდავს მათ. ასევე მას მიეწოდება for-ის მთვლელი k და უმატებს მას ans2-ს.
merge ფუნქცია აწებებს ორ სტრინგს და ბეჭდავს მას. ასევე მას მიეწოდება for-ის მთვლელი k და უმატებს მას ans2-ს.
ans1 არის 1-დან ფუნქციების რაოდენობამდე რიცხვთა ჯამი და საბოლოოდ, თუ thread pool-მა სწორად იმუშავა, ans1 უნდა იყოს ans2-ის ტოლი.

/////////////////////////////

Channel

runChannel-ში არის ორი ტესტი. ერთი ინტებზე(testChannelInt) და მეორე ქარ ფოინთერებზე(testChannelPointer).
თუ ჩენელის ინიციალიზაციისას size-ს გადავცემთ 0-ს, შეიქმნება unbuffered ჩენელი, ხოლო 0-ზე მეტის შემთხვევაში შეიქმნება buffered ჩენელი.
channel.c ფაილში შეგიძლიათ კომენტარერები წაუშალოთ printf-ებს, რათა გამოჩნდეს კომუნიკაციიის პროცესი.

/////////////////////////////

Future

იღებს void* fun(void* args) ტიპის ფუნქციებს და აბრუნებს პასუხზე void* მიმთითებელს.
runFuture უშვებს testFuture ფუნქციას, რომელიც კრებს ორ რენდომ რიცხვს.

/////////////////////////////

thread pool-ისა და ჩენელის იმპლემენტაციისთვის გამოყენებულია queue კლასი

/////////////////////////////

კომპილაციისთვის გამოიყენეთ

gcc main.c threadpool.c channel.c future.c queue.c -o a -lpthread

/////////////////////////////